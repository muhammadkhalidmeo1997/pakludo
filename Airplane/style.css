/* Reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Body */
html, body {
  width: 100%;
  height: 100%;
  overflow: auto; /* No scroll */
  background-image: url('IMG_20250807_222955.jpg'); /* Black background */
  font-family: Arial, sans-serif;
  touch-action: none;
}

/* Top Bar */
header {
  width: 100%;
  height: 60px;
  background-color: #111;
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 20px;
  font-size: 20px;
  position: fixed;
  top: 0;
  z-index: 1000;
  border-bottom: 1px solid #444;
}

.menu-btn {
  cursor: pointer;
  font-size: 28px;
}
/* Game Container */
.game-container {
  padding-top: 70px; /* Leave space for header */
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Avatars */
.top-avatars,
.bottom-avatars {
  display: flex;
  justify-content: space-between;
  width: 80vmin;
  margin: 10px auto;
}

.avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background-color: gray;
  color: white;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 0 5px rgba(0,0,0,0.4);
  font-size: 14px;
}

.avatar.red { background-color: red; }
.avatar.blue { background-color: blue; }
.avatar.green { background-color: green; }
.avatar.yellow { background-color: goldenrod; }


/* Game Wrapper (below header) */
#gameWrapper {
  flex: 1;
  display: flex;
  justify-content: center;
  width: 100%;
}

/* Game Board */
#gameBoard {
  width: 100vmin;
  height: 100vmin;
  background-color: white;
  border: 5px solid lightblue;
  border-radius: 20px;
  position: relative;
  overflow: hidden;
  max-width: 100%;
  max-height: 100%;
  margin-top: 50px;

  display: grid;
  grid-template-columns: repeat(15, 1fr);
  grid-template-rows: repeat(15, 1fr);
  gap: 1px;
}

 // helper: index from row,col
  function idx(r, c) {
    return r * 15 + c;
  }

  // helper: mark rectangle inclusive
  function markRect(r1, c1, r2, c2, klass) {
    for (let r = r1; r <= r2; r++) {
      for (let c = c1; c <= c2; c++) {
        cells[idx(r, c)].classList.add(klass);
      }
    }
  }

  // 1) Homes (6x6 style corners like many Ludo boards)
  markRect(0, 0, 5, 5, "green-home");       // top-left
  markRect(0, 9, 5, 14, "yellow-home");     // top-right
  markRect(9, 0, 14, 5, "red-home");        // bottom-left
  markRect(9, 9, 14, 14, "blue-home");      // bottom-right

  // 2) Center 3x3 (safe area)
  markRect(6, 6, 8, 8, "center");

  // 3) Main cross path (horizontal + vertical center lines)
  for (let c = 0; c < 15; c++) cells[idx(7, c)].classList.add("path");
  for (let r = 0; r < 15; r++) cells[idx(r, 7)].classList.add("path");

  // 4) Approach lanes (colored lanes from corner toward center)
  // Green approach (from top-left towards center)
  markRect(6, 0, 6, 5, "green-path");   // horizontal just below top-left home (row 6, cols 0..5)
  markRect(0, 6, 5, 6, "green-path");   // vertical right of top-left home (col 6, rows 0..5)

  // Yellow approach (top-right)
  markRect(6, 9, 6, 14, "yellow-path"); // horizontal just below top-right home
  markRect(0, 8, 5, 8, "yellow-path");  // vertical left of top-right home

  // Red approach (bottom-left)
  markRect(8, 0, 8, 5, "red-path");     // horizontal just above bottom-left home (row 8, cols 0..5)
  markRect(9, 6, 14, 6, "red-path");    // vertical right of bottom-left home

  // Blue approach (bottom-right)
  markRect(8, 9, 8, 14, "blue-path");   // horizontal just above bottom-right home
  markRect(9, 8, 14, 8, "blue-path");   // vertical left of bottom-right home

  // 5) mark home-entry cells (the 6-step final approach to center) â€” approximate:
  // these are the 6 cells that lead each color into the center cross (visual effect)
  const greenEntry = [[6,5],[6,6]]; // show two as entry near center
  const yellowEntry = [[6,8],[6,9]];
  const redEntry = [[8,6],[9,6]];
  const blueEntry = [[8,8],[9,8]];

  greenEntry.forEach(([r,c]) => cells[idx(r,c)].classList.add("green-entry"));
  yellowEntry.forEach(([r,c]) => cells[idx(r,c)].classList.add("yellow-entry"));
  redEntry.forEach(([r,c]) => cells[idx(r,c)].classList.add("red-entry"));
  blueEntry.forEach(([r,c]) => cells[idx(r,c)].classList.add("blue-entry"));

  // 6) Safe/star cells (visual marks). Common Ludo stars are near middle of each side:
  cells[idx(4,7)].classList.add("star");
  cells[idx(7,4)].classList.add("star");
  cells[idx(10,7)].classList.add("star");
  cells[idx(7,10)].classList.add("star");

  // 7) Add small index number for debug (optional) - comment out if you don't want numbers
  // cells.forEach((c, i) => c.innerText = i);

  console.log("Board generated: cells=", cells.length);
});
/* Grid Cells */
.cell {
  width: 100%;
  height: 100%;
  background-color: #eee;
  border: 1px solid #ccc;
}

/* Home Areas */
.cell.red-home {
  background-color: red;
}
.cell.blue-home {
  background-color: blue;
}
.cell.green-home {
  background-color: green;
}
.cell.yellow-home {
  background-color: goldenrod;


}

/* Player */
#player {
  position: absolute;
  bottom: 10px;
  left: 50%;
  width: 40px;
  height: 40px;
  background-color: red;
  transform: translateX(-50%);
  z-index: 10;
}
